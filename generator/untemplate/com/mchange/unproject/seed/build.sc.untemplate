import com.mchange.codegenutil.*

(input : BuildScInput)[]~()>

import mill._
import mill.scalalib._

// huge thanks to @lolgab onn the Scala discord!
import \$file.buildCompilationSettings

import \$ivy.`com.mchange::untemplate-mill:$untemplate_version$`
import untemplate.mill._

<()
  // remember that we're in Scala 3,
  // but generating Scala 2.13 code
  
  if input.extraPrologue.nonEmpty then
    writer.writeln(input.extraPrologue.trim)
    writer.writeln()
  if input.dependencies.nonEmpty then
    writer.writeln("object Dependency {");
    input.dependencies.foreach { case (name, dep) =>
      writer.writeln("  val ${name} = ${dep}")
    }
    writer.writeln("}")
    writer.writeln()
  end if
()>
object $module;format="camel"$ extends UntemplateModule {
  override def scalaVersion = "3.2.1"

  // supports Scala 3.2.1
  override def ammoniteVersion = "2.5.6"

  // we'll build an index!
  override def untemplateIndexNameFullyQualified : Option[String] = Some("$package;format="package"$.IndexedUntemplates")

  override def untemplateSelectCustomizer: untemplate.Customizer.Selector = { key =>
    var out = untemplate.Customizer.empty

    // to customize, examine key and modify the customer
    // with out = out.copy=...
    //
    // e.g. out = out.copy(extraImports=Seq("$package;format="camel"$.*"))

    out
  }
<()
if input.dependencies.nonEmpty then {
()>

  override def ivyDeps = T {
    super.ivyDeps() ++
      Agg (
<()
  input.dependencies.foreach { case (k,_) =>
()>
        Dependency.<( k )>,
<()
  }
()>
      ) // Agg
  }
<()
}
()>
}


